% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hmList.R
\name{hmList}
\alias{hmList}
\title{Generate a list of enriched heatmaps from a list of matrices.}
\usage{
hmList(
  matl,
  wins,
  split = NULL,
  split_cols,
  max_quantile = 0.99,
  min_quantile = 0,
  col_fun = "red",
  show_row_names = TRUE,
  win_labels = NULL,
  ylim = NULL,
  summarise_by = "mean",
  axis_labels = "",
  row_km = 1,
  log2 = FALSE
)
}
\arguments{
\item{matl}{A named list of matrices, where each matrix represents signal intensity
over genomic regions (e.g., output of \code{\link{matList}}).}

\item{wins}{A named integer vector specifying the number of bins (windows) that the
matrices in \code{matl} were normalized to for each feature type. The names
should correspond to the feature types (e.g., \code{c("Gene" = 10)}).}

\item{split}{An optional \code{data.frame} used to split the rows of the heatmaps.
Each column in the data frame will define a way to split the rows.}

\item{split_cols}{A named list specifying the colors for the levels of the splitting variable
provided in \code{split}. The names of the list should correspond to the column
names in the data frame used for splitting.}

\item{max_quantile}{A numeric value between 0 and 1 specifying the upper quantile for
scaling the color map. Values above this quantile will be capped.}

\item{min_quantile}{A numeric value between 0 and 1 specifying the lower quantile for
scaling the color map. Values below this quantile will be capped.}

\item{col_fun}{A character string specifying the color function to use. Options include
"red" (white to red), "bl2rd" (blue to white to red), or "red0" (white to light red to dark red starting from 0).
Alternatively, a custom color function generated by \code{circlize::colorRamp2} can be provided.}

\item{show_row_names}{A logical value indicating whether to display row names on the heatmaps.}

\item{win_labels}{An optional character vector specifying the labels for the feature windows
displayed in the top annotation. If \code{NULL}, the names of \code{wins} are used.}

\item{ylim}{An optional numeric vector of length 2 specifying the y-axis limits for the
enrichment profile in the top annotation. If \code{NULL}, limits are automatically determined.}

\item{summarise_by}{A character string specifying the function to summarise the rows for the
enrichment profile in the top annotation (e.g., "mean", "median").}

\item{axis_labels}{A character string specifying the label for the x-axis of the
enrichment profile in the top annotation.}

\item{row_km}{An integer specifying the number of clusters to perform k-means clustering on the rows.
If \code{NULL} or 1, no clustering is performed.}

\item{log2}{A logical value indicating whether to apply a log2 transformation (with a pseudocount of 1)
to the matrices in \code{matl} before plotting.}
}
\value{
A list of \code{EnrichedHeatmap} objects, one for each matrix in the input \code{matl}.
}
\description{
This function takes a list of matrices (typically the output of \code{\link{matList}})
and generates a list of enriched heatmaps using the \code{EnrichedHeatmap} package.
It allows for customization of color schemes, row splitting, column features,
quantile-based scaling, row name display, window labels, y-axis limits,
summarisation of enrichment, axis labels, row clustering, and log2 transformation.
}
\examples{
# Assuming you have generated a list of matrices using matList()
\dontrun{
# Create a dummy matrix list for demonstration
mat_list <- list(
  sample1 = matrix(rnorm(100), nrow = 20),
  sample2 = matrix(rnorm(100), nrow = 20)
)
wins_info <- c("FeatureA" = 5)

# Generate a list of enriched heatmaps
hm_list <- hmList(matl = mat_list, wins = wins_info)

# Generate heatmaps with row splitting and custom colors
split_df <- data.frame(group = factor(rep(c("Group1", "Group2"), each = 10)))
split_colors <- list("group" = c("Group1" = "blue", "Group2" = "green"))
hm_list_split <- hmList(matl = mat_list, wins = wins_info, split = split_df,
                        split_cols = split_colors)
}
}
