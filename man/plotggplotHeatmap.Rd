% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotggplotHeatmap.R
\name{plotggplotHeatmap}
\alias{plotggplotHeatmap}
\title{Generate a list of ggplot2 heatmaps from a list of matrices.}
\usage{
plotggplotHeatmap(
  matl,
  color_palette = "red_white",
  zMin = NULL,
  zMax = NULL,
  xlab = NULL,
  ylab = NULL,
  fill_label = "Signal",
  title = NULL,
  wins,
  break_labels,
  average_profile = FALSE,
  k_clusters = NULL,
  log2 = FALSE,
  dottedlines = FALSE,
  split = NULL
)
}
\arguments{
\item{matl}{A named list of matrices, where each matrix represents signal intensity
over genomic regions (e.g., output of \code{\link{matList}}).}

\item{color_palette}{A character string specifying the color palette to use
(e.g., "red_white", "viridis", "magma", "inferno", "cividis", "Blues",
"Greens", "Reds", "RdBu", "RdYlBu", "PuOr", "BrBG"). Alternatively, a
vector of colors for a custom palette can be provided.}

\item{zMin}{A numeric value specifying the minimum value for the color scale.
If "auto", it will be set to the 1st percentile of all values in \code{matl}.
If \code{NULL}, no lower limit is enforced by the function (ggplot2 will determine it).}

\item{zMax}{A numeric value specifying the maximum value for the color scale.
If "auto", it will be set to the 99th percentile of all values in \code{matl}.
If \code{NULL}, no upper limit is enforced by the function (ggplot2 will determine it).}

\item{xlab}{A character string specifying the label for the x-axis.}

\item{ylab}{A character string specifying the label for the y-axis.}

\item{fill_label}{A character string specifying the label for the fill scale (legend).}

\item{title}{An optional character string specifying the title for the plot (will be
used if \code{average_profile = FALSE}).}

\item{wins}{A named integer vector specifying the number of bins (windows) that the
matrices in \code{matl} were normalized to for each feature type. The names
should correspond to the feature types (e.g., \code{c("Gene" = 10)}).}

\item{break_labels}{A character vector specifying the labels for the breaks on the
x-axis. The length of this vector must be equal to the number of breaks
defined by \code{wins} plus one (for the start).}

\item{average_profile}{A logical value indicating whether to include an average
profile plot above each heatmap.}

\item{k_clusters}{An optional integer specifying the number of clusters for k-means
clustering of the rows in each matrix. If provided, the heatmap will be
faceted by cluster.}

\item{log2}{A logical value indicating whether to apply a log2 transformation
(with a pseudocount of 1) to the matrices in \code{matl} before plotting.}

\item{dottedlines}{A logical value indicating whether to add dotted vertical lines
at the breaks defined by \code{wins}.}

\item{split}{An optional \code{data.frame} used to split the rows of the heatmaps.
It should have one column, and its rownames should correspond to the
rownames of the matrices in \code{matl} (assumed to be gene IDs).}
}
\value{
A single ggplot2 object if only one matrix is provided in \code{matl},
        otherwise a combined ggplot2 object using \code{patchwork}.
}
\description{
This function takes a list of matrices (typically the output of \code{\link{matList}})
and generates a list of ggplot2 heatmaps, with options for color palettes,
scaling, labels, average profiles, k-means clustering, log2 transformation,
dotted lines, and row splitting.
}
\examples{
# Assuming you have generated a list of matrices using matList()
\dontrun{
# Create a dummy matrix list for demonstration
mat_list <- list(
  sample1 = matrix(rnorm(100), nrow = 20, dimnames = list(paste0("gene", 1:20))),
  sample2 = matrix(rnorm(100), nrow = 20, dimnames = list(paste0("gene", 1:20)))
)
wins_info <- c("FeatureA" = 5)
break_labs <- c("Start", "FeatureA")

# Basic heatmap
plotggplotHeatmap(matl = mat_list, wins = wins_info, break_labels = break_labs)

# Heatmap with average profile
plotggplotHeatmap(matl = mat_list, wins = wins_info, break_labels = break_labs,
                  average_profile = TRUE)

# Heatmap with k-means clustering
plotggplotHeatmap(matl = mat_list, wins = wins_info, break_labels = break_labs,
                  k_clusters = 2)

# Heatmap with row splitting
split_df <- data.frame(group = factor(rep(c("Group1", "Group2"), each = 10)),
                       row.names = paste0("gene", 1:20))
plotggplotHeatmap(matl = mat_list, wins = wins_info, break_labels = break_labs,
                  split = split_df)
}
}
